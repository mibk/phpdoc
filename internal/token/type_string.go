// Code generated by "stringer -type Type -linecomment"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[EOF-0]
	_ = x[Newline-1]
	_ = x[Whitespace-2]
	_ = x[Ident-3]
	_ = x[TagName-4]
	_ = x[VarName-5]
	_ = x[Decimal-6]
	_ = x[Other-7]
	_ = x[symbolStart-8]
	_ = x[OpenDoc-9]
	_ = x[CloseDoc-10]
	_ = x[Asterisk-11]
	_ = x[Backslash-12]
	_ = x[Qmark-13]
	_ = x[Lparen-14]
	_ = x[Rparen-15]
	_ = x[Lbrack-16]
	_ = x[Rbrack-17]
	_ = x[Lbrace-18]
	_ = x[Rbrace-19]
	_ = x[Lt-20]
	_ = x[Gt-21]
	_ = x[Comma-22]
	_ = x[Colon-23]
	_ = x[Ellipsis-24]
	_ = x[Or-25]
	_ = x[And-26]
	_ = x[symbolEnd-27]
	_ = x[keywordStart-28]
	_ = x[This-29]
	_ = x[Array-30]
	_ = x[Callable-31]
	_ = x[Static-32]
	_ = x[keywordEnd-33]
}

const _Type_name = "EOF\\nWhitespaceIdentTagNameVarNameDecimalOthersymbolStart/***/*\\?()[]{}<>,:...|&symbolEndkeywordStart$thisarraycallablestatickeywordEnd"

var _Type_index = [...]uint8{0, 3, 5, 15, 20, 27, 34, 41, 46, 57, 60, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 78, 79, 80, 89, 101, 106, 111, 119, 125, 135}

func (i Type) String() string {
	if i < 0 || i >= Type(len(_Type_index)-1) {
		return "Type(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Type_name[_Type_index[i]:_Type_index[i+1]]
}
